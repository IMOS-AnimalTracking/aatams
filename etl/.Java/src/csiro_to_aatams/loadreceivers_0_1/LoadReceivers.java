// ============================================================================
//
// Copyright (c) 2005-2012, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / JobDesigner (CodeGenerator version 5.1.0.r82787)
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================
package csiro_to_aatams.loadreceivers_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: LoadReceivers Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.1.0.r82787
 * @status 
 */
public class LoadReceivers implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "LoadReceivers";
	private final String projectName = "CSIRO_TO_AATAMS";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	public boolean isExportedAsOSGI = false;

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception = null;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE", e
						.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					LoadReceivers.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(LoadReceivers.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tJoin_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJoin_1", System.currentTimeMillis());

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_2", System.currentTimeMillis());

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tPostgresqlOutput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tPostgresqlInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tPostgresqlInput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tPostgresqlInput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tAdvancedHash_row2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tHash_row3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHash_row3", System.currentTimeMillis());

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tAdvancedHash_row6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public long version;

		public long getVersion() {
			return this.version;
		}

		public String comment;

		public String getComment() {
			return this.comment;
		}

		public long model_id;

		public long getModel_id() {
			return this.model_id;
		}

		public String serial_number;

		public String getSerial_number() {
			return this.serial_number;
		}

		public Long status_id;

		public Long getStatus_id() {
			return this.status_id;
		}

		public String _class;

		public String get_class() {
			return this._class;
		}

		public Long organisation_id;

		public Long getOrganisation_id() {
			return this.organisation_id;
		}

		public Integer expected_life_time_days;

		public Integer getExpected_life_time_days() {
			return this.expected_life_time_days;
		}

		public Long project_id;

		public Long getProject_id() {
			return this.project_id;
		}

		public Long code_map_id;

		public Long getCode_map_id() {
			return this.code_map_id;
		}

		public long id;

		public long getId() {
			return this.id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.version = dis.readLong();

					this.comment = readString(dis);

					this.model_id = dis.readLong();

					this.serial_number = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_id = null;
					} else {
						this.status_id = dis.readLong();
					}

					this._class = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.organisation_id = null;
					} else {
						this.organisation_id = dis.readLong();
					}

					this.expected_life_time_days = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.project_id = null;
					} else {
						this.project_id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.code_map_id = null;
					} else {
						this.code_map_id = dis.readLong();
					}

					this.id = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.version);

				// String

				writeString(this.comment, dos);

				// long

				dos.writeLong(this.model_id);

				// String

				writeString(this.serial_number, dos);

				// Long

				if (this.status_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.status_id);
				}

				// String

				writeString(this._class, dos);

				// Long

				if (this.organisation_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.organisation_id);
				}

				// Integer

				writeInteger(this.expected_life_time_days, dos);

				// Long

				if (this.project_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.project_id);
				}

				// Long

				if (this.code_map_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.code_map_id);
				}

				// long

				dos.writeLong(this.id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("version=" + String.valueOf(version));
			sb.append(",comment=" + comment);
			sb.append(",model_id=" + String.valueOf(model_id));
			sb.append(",serial_number=" + serial_number);
			sb.append(",status_id=" + String.valueOf(status_id));
			sb.append(",_class=" + _class);
			sb.append(",organisation_id=" + String.valueOf(organisation_id));
			sb.append(",expected_life_time_days="
					+ String.valueOf(expected_life_time_days));
			sb.append(",project_id=" + String.valueOf(project_id));
			sb.append(",code_map_id=" + String.valueOf(code_map_id));
			sb.append(",id=" + String.valueOf(id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public int RCV_ID;

		public int getRCV_ID() {
			return this.RCV_ID;
		}

		public String RCV_SERIAL_NO;

		public String getRCV_SERIAL_NO() {
			return this.RCV_SERIAL_NO;
		}

		public String RCV_MODEL_CODE;

		public String getRCV_MODEL_CODE() {
			return this.RCV_MODEL_CODE;
		}

		public String RCV_OWNER;

		public String getRCV_OWNER() {
			return this.RCV_OWNER;
		}

		public String RCV_COMMENTS;

		public String getRCV_COMMENTS() {
			return this.RCV_COMMENTS;
		}

		public java.util.Date ENTRY_DATETIME;

		public java.util.Date getENTRY_DATETIME() {
			return this.ENTRY_DATETIME;
		}

		public String ENTRY_BY;

		public String getENTRY_BY() {
			return this.ENTRY_BY;
		}

		public java.util.Date MODIFIED_DATETIME;

		public java.util.Date getMODIFIED_DATETIME() {
			return this.MODIFIED_DATETIME;
		}

		public String MODIFIED_BY;

		public String getMODIFIED_BY() {
			return this.MODIFIED_BY;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.RCV_ID = dis.readInt();

					this.RCV_SERIAL_NO = readString(dis);

					this.RCV_MODEL_CODE = readString(dis);

					this.RCV_OWNER = readString(dis);

					this.RCV_COMMENTS = readString(dis);

					this.ENTRY_DATETIME = readDate(dis);

					this.ENTRY_BY = readString(dis);

					this.MODIFIED_DATETIME = readDate(dis);

					this.MODIFIED_BY = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.RCV_ID);

				// String

				writeString(this.RCV_SERIAL_NO, dos);

				// String

				writeString(this.RCV_MODEL_CODE, dos);

				// String

				writeString(this.RCV_OWNER, dos);

				// String

				writeString(this.RCV_COMMENTS, dos);

				// java.util.Date

				writeDate(this.ENTRY_DATETIME, dos);

				// String

				writeString(this.ENTRY_BY, dos);

				// java.util.Date

				writeDate(this.MODIFIED_DATETIME, dos);

				// String

				writeString(this.MODIFIED_BY, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("RCV_ID=" + String.valueOf(RCV_ID));
			sb.append(",RCV_SERIAL_NO=" + RCV_SERIAL_NO);
			sb.append(",RCV_MODEL_CODE=" + RCV_MODEL_CODE);
			sb.append(",RCV_OWNER=" + RCV_OWNER);
			sb.append(",RCV_COMMENTS=" + RCV_COMMENTS);
			sb.append(",ENTRY_DATETIME=" + String.valueOf(ENTRY_DATETIME));
			sb.append(",ENTRY_BY=" + ENTRY_BY);
			sb.append(",MODIFIED_DATETIME=" + String.valueOf(MODIFIED_DATETIME));
			sb.append(",MODIFIED_BY=" + MODIFIED_BY);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public int RCV_ID;

		public int getRCV_ID() {
			return this.RCV_ID;
		}

		public String RCV_SERIAL_NO;

		public String getRCV_SERIAL_NO() {
			return this.RCV_SERIAL_NO;
		}

		public String RCV_MODEL_CODE;

		public String getRCV_MODEL_CODE() {
			return this.RCV_MODEL_CODE;
		}

		public String RCV_OWNER;

		public String getRCV_OWNER() {
			return this.RCV_OWNER;
		}

		public String RCV_COMMENTS;

		public String getRCV_COMMENTS() {
			return this.RCV_COMMENTS;
		}

		public java.util.Date ENTRY_DATETIME;

		public java.util.Date getENTRY_DATETIME() {
			return this.ENTRY_DATETIME;
		}

		public String ENTRY_BY;

		public String getENTRY_BY() {
			return this.ENTRY_BY;
		}

		public java.util.Date MODIFIED_DATETIME;

		public java.util.Date getMODIFIED_DATETIME() {
			return this.MODIFIED_DATETIME;
		}

		public String MODIFIED_BY;

		public String getMODIFIED_BY() {
			return this.MODIFIED_BY;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.RCV_ID = dis.readInt();

					this.RCV_SERIAL_NO = readString(dis);

					this.RCV_MODEL_CODE = readString(dis);

					this.RCV_OWNER = readString(dis);

					this.RCV_COMMENTS = readString(dis);

					this.ENTRY_DATETIME = readDate(dis);

					this.ENTRY_BY = readString(dis);

					this.MODIFIED_DATETIME = readDate(dis);

					this.MODIFIED_BY = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.RCV_ID);

				// String

				writeString(this.RCV_SERIAL_NO, dos);

				// String

				writeString(this.RCV_MODEL_CODE, dos);

				// String

				writeString(this.RCV_OWNER, dos);

				// String

				writeString(this.RCV_COMMENTS, dos);

				// java.util.Date

				writeDate(this.ENTRY_DATETIME, dos);

				// String

				writeString(this.ENTRY_BY, dos);

				// java.util.Date

				writeDate(this.MODIFIED_DATETIME, dos);

				// String

				writeString(this.MODIFIED_BY, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("RCV_ID=" + String.valueOf(RCV_ID));
			sb.append(",RCV_SERIAL_NO=" + RCV_SERIAL_NO);
			sb.append(",RCV_MODEL_CODE=" + RCV_MODEL_CODE);
			sb.append(",RCV_OWNER=" + RCV_OWNER);
			sb.append(",RCV_COMMENTS=" + RCV_COMMENTS);
			sb.append(",ENTRY_DATETIME=" + String.valueOf(ENTRY_DATETIME));
			sb.append(",ENTRY_BY=" + ENTRY_BY);
			sb.append(",MODIFIED_DATETIME=" + String.valueOf(MODIFIED_DATETIME));
			sb.append(",MODIFIED_BY=" + MODIFIED_BY);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public int RCV_ID;

		public int getRCV_ID() {
			return this.RCV_ID;
		}

		public String RCV_SERIAL_NO;

		public String getRCV_SERIAL_NO() {
			return this.RCV_SERIAL_NO;
		}

		public String RCV_MODEL_CODE;

		public String getRCV_MODEL_CODE() {
			return this.RCV_MODEL_CODE;
		}

		public String RCV_OWNER;

		public String getRCV_OWNER() {
			return this.RCV_OWNER;
		}

		public String RCV_COMMENTS;

		public String getRCV_COMMENTS() {
			return this.RCV_COMMENTS;
		}

		public java.util.Date ENTRY_DATETIME;

		public java.util.Date getENTRY_DATETIME() {
			return this.ENTRY_DATETIME;
		}

		public String ENTRY_BY;

		public String getENTRY_BY() {
			return this.ENTRY_BY;
		}

		public java.util.Date MODIFIED_DATETIME;

		public java.util.Date getMODIFIED_DATETIME() {
			return this.MODIFIED_DATETIME;
		}

		public String MODIFIED_BY;

		public String getMODIFIED_BY() {
			return this.MODIFIED_BY;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.RCV_ID = dis.readInt();

					this.RCV_SERIAL_NO = readString(dis);

					this.RCV_MODEL_CODE = readString(dis);

					this.RCV_OWNER = readString(dis);

					this.RCV_COMMENTS = readString(dis);

					this.ENTRY_DATETIME = readDate(dis);

					this.ENTRY_BY = readString(dis);

					this.MODIFIED_DATETIME = readDate(dis);

					this.MODIFIED_BY = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.RCV_ID);

				// String

				writeString(this.RCV_SERIAL_NO, dos);

				// String

				writeString(this.RCV_MODEL_CODE, dos);

				// String

				writeString(this.RCV_OWNER, dos);

				// String

				writeString(this.RCV_COMMENTS, dos);

				// java.util.Date

				writeDate(this.ENTRY_DATETIME, dos);

				// String

				writeString(this.ENTRY_BY, dos);

				// java.util.Date

				writeDate(this.MODIFIED_DATETIME, dos);

				// String

				writeString(this.MODIFIED_BY, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("RCV_ID=" + String.valueOf(RCV_ID));
			sb.append(",RCV_SERIAL_NO=" + RCV_SERIAL_NO);
			sb.append(",RCV_MODEL_CODE=" + RCV_MODEL_CODE);
			sb.append(",RCV_OWNER=" + RCV_OWNER);
			sb.append(",RCV_COMMENTS=" + RCV_COMMENTS);
			sb.append(",ENTRY_DATETIME=" + String.valueOf(ENTRY_DATETIME));
			sb.append(",ENTRY_BY=" + ENTRY_BY);
			sb.append(",MODIFIED_DATETIME=" + String.valueOf(MODIFIED_DATETIME));
			sb.append(",MODIFIED_BY=" + MODIFIED_BY);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_2Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_2Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public int RCV_ID;

		public int getRCV_ID() {
			return this.RCV_ID;
		}

		public String RCV_SERIAL_NO;

		public String getRCV_SERIAL_NO() {
			return this.RCV_SERIAL_NO;
		}

		public String RCV_MODEL_CODE;

		public String getRCV_MODEL_CODE() {
			return this.RCV_MODEL_CODE;
		}

		public String RCV_OWNER;

		public String getRCV_OWNER() {
			return this.RCV_OWNER;
		}

		public String RCV_COMMENTS;

		public String getRCV_COMMENTS() {
			return this.RCV_COMMENTS;
		}

		public java.util.Date ENTRY_DATETIME;

		public java.util.Date getENTRY_DATETIME() {
			return this.ENTRY_DATETIME;
		}

		public String ENTRY_BY;

		public String getENTRY_BY() {
			return this.ENTRY_BY;
		}

		public java.util.Date MODIFIED_DATETIME;

		public java.util.Date getMODIFIED_DATETIME() {
			return this.MODIFIED_DATETIME;
		}

		public String MODIFIED_BY;

		public String getMODIFIED_BY() {
			return this.MODIFIED_BY;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.RCV_ID = dis.readInt();

					this.RCV_SERIAL_NO = readString(dis);

					this.RCV_MODEL_CODE = readString(dis);

					this.RCV_OWNER = readString(dis);

					this.RCV_COMMENTS = readString(dis);

					this.ENTRY_DATETIME = readDate(dis);

					this.ENTRY_BY = readString(dis);

					this.MODIFIED_DATETIME = readDate(dis);

					this.MODIFIED_BY = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.RCV_ID);

				// String

				writeString(this.RCV_SERIAL_NO, dos);

				// String

				writeString(this.RCV_MODEL_CODE, dos);

				// String

				writeString(this.RCV_OWNER, dos);

				// String

				writeString(this.RCV_COMMENTS, dos);

				// java.util.Date

				writeDate(this.ENTRY_DATETIME, dos);

				// String

				writeString(this.ENTRY_BY, dos);

				// java.util.Date

				writeDate(this.MODIFIED_DATETIME, dos);

				// String

				writeString(this.MODIFIED_BY, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("RCV_ID=" + String.valueOf(RCV_ID));
			sb.append(",RCV_SERIAL_NO=" + RCV_SERIAL_NO);
			sb.append(",RCV_MODEL_CODE=" + RCV_MODEL_CODE);
			sb.append(",RCV_OWNER=" + RCV_OWNER);
			sb.append(",RCV_COMMENTS=" + RCV_COMMENTS);
			sb.append(",ENTRY_DATETIME=" + String.valueOf(ENTRY_DATETIME));
			sb.append(",ENTRY_BY=" + ENTRY_BY);
			sb.append(",MODIFIED_DATETIME=" + String.valueOf(MODIFIED_DATETIME));
			sb.append(",MODIFIED_BY=" + MODIFIED_BY);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_1Process(globalMap);
				tPostgresqlInput_2Process(globalMap);
				tPostgresqlInput_3Process(globalMap);

				row1Struct row1 = new row1Struct();
				row5Struct row5 = new row5Struct();
				row4Struct row4 = new row4Struct();
				out1Struct out1 = new out1Struct();

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());
				currentComponent = "tLogRow_2";

				if (execStat) {
					runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
				}

				int tos_count_tLogRow_2 = 0;

				// /////////////////////

				class Util_tLogRow_2 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[9];

					public void addRow(String[] row) {

						for (int i = 0; i < 9; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i]
										.length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 8 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 8 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(
									new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(),
									(Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0]
								- fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[8]
								- fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}
				}
				Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
				util_tLogRow_2.setTableName("tLogRow_2");
				util_tLogRow_2.addRow(new String[] { "RCV_ID", "RCV_SERIAL_NO",
						"RCV_MODEL_CODE", "RCV_OWNER", "RCV_COMMENTS",
						"ENTRY_DATETIME", "ENTRY_BY", "MODIFIED_DATETIME",
						"MODIFIED_BY", });
				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
				// /////////////////////

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tPostgresqlOutput_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_2", false);
				start_Hash.put("tPostgresqlOutput_2", System
						.currentTimeMillis());
				currentComponent = "tPostgresqlOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection("out1" + iterateId, 0, 0);
				}

				int tos_count_tPostgresqlOutput_2 = 0;

				String dbschema_tPostgresqlOutput_2 = null;
				dbschema_tPostgresqlOutput_2 = "public";

				String tableName_tPostgresqlOutput_2 = null;
				if (dbschema_tPostgresqlOutput_2 == null
						|| dbschema_tPostgresqlOutput_2.trim().length() == 0) {
					tableName_tPostgresqlOutput_2 = "device";
				} else {
					tableName_tPostgresqlOutput_2 = dbschema_tPostgresqlOutput_2
							+ "\".\"" + "device";
				}

				int nb_line_tPostgresqlOutput_2 = 0;
				int nb_line_update_tPostgresqlOutput_2 = 0;
				int nb_line_inserted_tPostgresqlOutput_2 = 0;
				int nb_line_deleted_tPostgresqlOutput_2 = 0;
				int nb_line_rejected_tPostgresqlOutput_2 = 0;

				int deletedCount_tPostgresqlOutput_2 = 0;
				int updatedCount_tPostgresqlOutput_2 = 0;
				int insertedCount_tPostgresqlOutput_2 = 0;
				int rejectedCount_tPostgresqlOutput_2 = 0;

				boolean whetherReject_tPostgresqlOutput_2 = false;

				java.sql.Connection conn_tPostgresqlOutput_2 = null;
				java.lang.Class.forName("org.postgresql.Driver");
				String url_tPostgresqlOutput_2 = "jdbc:postgresql://"
						+ "localhost" + ":" + "5432" + "/" + "aatams";
				String dbUser_tPostgresqlOutput_2 = "postgres";
				String dbPwd_tPostgresqlOutput_2 = "postgres";
				conn_tPostgresqlOutput_2 = java.sql.DriverManager
						.getConnection(url_tPostgresqlOutput_2,
								dbUser_tPostgresqlOutput_2,
								dbPwd_tPostgresqlOutput_2);

				conn_tPostgresqlOutput_2.setAutoCommit(false);
				int commitEvery_tPostgresqlOutput_2 = 10000;
				int commitCounter_tPostgresqlOutput_2 = 0;

				int count_tPostgresqlOutput_2 = 0;
				String insert_tPostgresqlOutput_2 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_2
						+ "\" (\"version\",\"comment\",\"model_id\",\"serial_number\",\"status_id\",\"class\",\"organisation_id\",\"expected_life_time_days\",\"project_id\",\"code_map_id\",\"id\") VALUES (?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2
						.prepareStatement(insert_tPostgresqlOutput_2);

				/**
				 * [tPostgresqlOutput_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());
				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
				}

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) globalMap
						.get("tHash_Lookup_row6"));

				tHash_Lookup_row6.initGet();

				row6Struct row6HashKey = new row6Struct();
				row6Struct row6Default = new row6Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tJoin_1 begin ] start
				 */

				ok_Hash.put("tJoin_1", false);
				start_Hash.put("tJoin_1", System.currentTimeMillis());
				currentComponent = "tJoin_1";

				if (execStat) {
					runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
				}

				int tos_count_tJoin_1 = 0;
				final java.util.Map<row3Struct, row3Struct> tHash_tJoin_1 = (java.util.Map<row3Struct, row3Struct>) globalMap
						.get("tHash_row3");

				class Util_tJoin_1 {
					row3Struct lookupValue = null;
					row3Struct row3HashKey = new row3Struct();

					public boolean isJoined(row1Struct mainRow) {
						row3HashKey.serial_number = mainRow.RCV_SERIAL_NO;
						row3HashKey.hashCodeDirty = true;
						lookupValue = tHash_tJoin_1.get(row3HashKey);
						if (lookupValue != null) {
							return true;
						}
						return false;
					}
				}

				Util_tJoin_1 util_tJoin_1 = new Util_tJoin_1();

				int nb_line_tJoin_1 = 0;

				/**
				 * [tJoin_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System
						.currentTimeMillis());
				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				class RowHelper_tFileInputDelimited_2 {

					public void valueToConn(String[] row, row1Struct row1)
							throws Exception {

						if (row.length == 1 && ("\015").equals(row[0])) {// empty
																			// line
																			// when
																			// row
																			// separator
																			// is
																			// '\n'

							row1.RCV_ID = 0;

							row1.RCV_SERIAL_NO = null;

							row1.RCV_MODEL_CODE = null;

							row1.RCV_OWNER = null;

							row1.RCV_COMMENTS = null;

							row1.ENTRY_DATETIME = null;

							row1.ENTRY_BY = null;

							row1.MODIFIED_DATETIME = null;

							row1.MODIFIED_BY = null;

						} else {

							if (0 < row.length) {

								if (row[0].length() > 0) {

									row1.RCV_ID = ParserUtils
											.parseTo_int(row[0].trim());

								} else {
									row1.RCV_ID = 0;
								}

							} else {
								row1.RCV_ID = 0;
							}

							if (1 < row.length) {

								row1.RCV_SERIAL_NO = row[1].trim();

							} else {
								row1.RCV_SERIAL_NO = null;
							}

							if (2 < row.length) {

								row1.RCV_MODEL_CODE = row[2].trim();

							} else {
								row1.RCV_MODEL_CODE = null;
							}

							if (3 < row.length) {

								row1.RCV_OWNER = row[3].trim();

							} else {
								row1.RCV_OWNER = null;
							}

							if (4 < row.length) {

								row1.RCV_COMMENTS = row[4].trim();

							} else {
								row1.RCV_COMMENTS = null;
							}

							if (5 < row.length) {

								if (row[5].length() > 0) {

									row1.ENTRY_DATETIME = ParserUtils
											.parseTo_Date(row[5].trim(),
													"dd/MM/yyyy' 'HH:mm:ss");

								} else {
									row1.ENTRY_DATETIME = null;
								}

							} else {
								row1.ENTRY_DATETIME = null;
							}

							if (6 < row.length) {

								row1.ENTRY_BY = row[6].trim();

							} else {
								row1.ENTRY_BY = null;
							}

							if (7 < row.length) {

								if (row[7].length() > 0) {

									row1.MODIFIED_DATETIME = ParserUtils
											.parseTo_Date(row[7].trim(),
													"dd/MM/yyyy' 'HH:mm:ss");

								} else {
									row1.MODIFIED_DATETIME = null;
								}

							} else {
								row1.MODIFIED_DATETIME = null;
							}

							if (8 < row.length) {

								row1.MODIFIED_BY = row[8].trim();

							} else {
								row1.MODIFIED_BY = null;
							}

						}

					}

				}
				RowHelper_tFileInputDelimited_2 rowHelper_tFileInputDelimited_2 = new RowHelper_tFileInputDelimited_2();

				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;

				char fieldSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_2 = ((String) ",")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_2 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_2 = /**
				 * Start field
				 * tFileInputDelimited_2:FILENAME
				 */
				"/Users/jburgess/Documents/talend_aatams_workspace/test_data/RECEIVERS_22MAY12.csv"/**
				 * 
				 * End field tFileInputDelimited_2:FILENAME
				 */
				;
				com.csvreader.CsvReader csvReadertFileInputDelimited_2 = null;

				try {

					String[] rowtFileInputDelimited_2 = null;
					int currentLinetFileInputDelimited_2 = 0;
					int outputLinetFileInputDelimited_2 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_2 = 0;
							if (footer_value_tFileInputDelimited_2 > 0) {
								throw new Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_2 = new com.csvreader.CsvReader(
									(java.io.InputStream) filename_tFileInputDelimited_2,
									fieldSeparator_tFileInputDelimited_2[0],
									java.nio.charset.Charset
											.forName("ISO-8859-15"));
						} else {
							csvReadertFileInputDelimited_2 = new com.csvreader.CsvReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_2)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_2[0]);
						}

						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
							csvReadertFileInputDelimited_2
									.setRecordDelimiter(rowSeparator_tFileInputDelimited_2[0]);

						csvReadertFileInputDelimited_2.setTextQualifier('\"');

						// ?????doesn't work for other escapeChar

						if (footer_tFileInputDelimited_2 > 0) {
							for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readRecord();
							}
							csvReadertFileInputDelimited_2
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_2.readRecord()) {

								rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
										.getValues();
								if (!(rowtFileInputDelimited_2.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_2[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_2++;

								}

							}
							int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
									- footer_tFileInputDelimited_2 < 0 ? 0
									: totalLinetFileInputDelimited_2
											- footer_tFileInputDelimited_2;
							if (lastLinetFileInputDelimited_2 > 0) {
								lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2
										: lastLineTemptFileInputDelimited_2;
							} else {
								lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
							}

							csvReadertFileInputDelimited_2.close();
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_2 = new com.csvreader.CsvReader(
										(java.io.InputStream) filename_tFileInputDelimited_2,
										fieldSeparator_tFileInputDelimited_2[0],
										java.nio.charset.Charset
												.forName("ISO-8859-15"));
							} else {
								csvReadertFileInputDelimited_2 = new com.csvreader.CsvReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_2)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_2[0]);
							}
							csvReadertFileInputDelimited_2
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
								csvReadertFileInputDelimited_2
										.setRecordDelimiter(rowSeparator_tFileInputDelimited_2[0]);

							csvReadertFileInputDelimited_2
									.setTextQualifier('\"');

							// ?????doesn't work for other escapeChar

						}

						if (limittFileInputDelimited_2 != 0) {
							for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 1; currentLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readRecord();
							}
						}
						csvReadertFileInputDelimited_2
								.setSkipEmptyRecords(true);

					} catch (Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_2 != 0
							&& csvReadertFileInputDelimited_2 != null
							&& csvReadertFileInputDelimited_2.readRecord()) {

						rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
								.getValues();

						if (rowtFileInputDelimited_2.length == 1
								&& ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_2++;

						if (lastLinetFileInputDelimited_2 > -1
								&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
							break;
						}
						outputLinetFileInputDelimited_2++;
						if (limittFileInputDelimited_2 > 0
								&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
							break;
						}

						row1 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row1 = new row1Struct();
						try {

							rowHelper_tFileInputDelimited_2.valueToConn(
									rowtFileInputDelimited_2, row1);

						} catch (Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {
							row4 = null;

							/**
							 * [tJoin_1 main ] start
							 */

							currentComponent = "tJoin_1";

							// row1
							// row1

							if (execStat) {
								runStat.updateStatOnConnection("row1"
										+ iterateId, 1, 1);
							}

							row5 = null;
							row4 = null;

							row5 = new row5Struct();
							row5.RCV_ID = row1.RCV_ID;
							row5.RCV_SERIAL_NO = row1.RCV_SERIAL_NO;
							row5.RCV_MODEL_CODE = row1.RCV_MODEL_CODE;
							row5.RCV_OWNER = row1.RCV_OWNER;
							row5.RCV_COMMENTS = row1.RCV_COMMENTS;
							row5.ENTRY_DATETIME = row1.ENTRY_DATETIME;
							row5.ENTRY_BY = row1.ENTRY_BY;
							row5.MODIFIED_DATETIME = row1.MODIFIED_DATETIME;
							row5.MODIFIED_BY = row1.MODIFIED_BY;

							row4 = new row4Struct();
							row4.RCV_ID = row1.RCV_ID;
							row4.RCV_SERIAL_NO = row1.RCV_SERIAL_NO;
							row4.RCV_MODEL_CODE = row1.RCV_MODEL_CODE;
							row4.RCV_OWNER = row1.RCV_OWNER;
							row4.RCV_COMMENTS = row1.RCV_COMMENTS;
							row4.ENTRY_DATETIME = row1.ENTRY_DATETIME;
							row4.ENTRY_BY = row1.ENTRY_BY;
							row4.MODIFIED_DATETIME = row1.MODIFIED_DATETIME;
							row4.MODIFIED_BY = row1.MODIFIED_BY;

							if (util_tJoin_1.isJoined(row1)) {
								row4 = null;
							}

							else {
								row5 = null;
							}

							// /////////////////////

							tos_count_tJoin_1++;

							/**
							 * [tJoin_1 main ] stop
							 */
							// Start of branch "row5"
							if (row5 != null) {

								/**
								 * [tLogRow_2 main ] start
								 */

								currentComponent = "tLogRow_2";

								// row5
								// row5

								if (execStat) {
									runStat.updateStatOnConnection("row5"
											+ iterateId, 1, 1);
								}

								// /////////////////////

								String[] row_tLogRow_2 = new String[9];

								row_tLogRow_2[0] = String.valueOf(row5.RCV_ID);

								if (row5.RCV_SERIAL_NO != null) { //
									row_tLogRow_2[1] = String
											.valueOf(row5.RCV_SERIAL_NO);

								} //

								if (row5.RCV_MODEL_CODE != null) { //
									row_tLogRow_2[2] = String
											.valueOf(row5.RCV_MODEL_CODE);

								} //

								if (row5.RCV_OWNER != null) { //
									row_tLogRow_2[3] = String
											.valueOf(row5.RCV_OWNER);

								} //

								if (row5.RCV_COMMENTS != null) { //
									row_tLogRow_2[4] = String
											.valueOf(row5.RCV_COMMENTS);

								} //

								if (row5.ENTRY_DATETIME != null) { //
									row_tLogRow_2[5] = FormatterUtils
											.format_Date(row5.ENTRY_DATETIME,
													"dd/MM/yyyy' 'HH:mm:ss");

								} //

								if (row5.ENTRY_BY != null) { //
									row_tLogRow_2[6] = String
											.valueOf(row5.ENTRY_BY);

								} //

								if (row5.MODIFIED_DATETIME != null) { //
									row_tLogRow_2[7] = FormatterUtils
											.format_Date(
													row5.MODIFIED_DATETIME,
													"dd/MM/yyyy' 'HH:mm:ss");

								} //

								if (row5.MODIFIED_BY != null) { //
									row_tLogRow_2[8] = String
											.valueOf(row5.MODIFIED_BY);

								} //

								util_tLogRow_2.addRow(row_tLogRow_2);
								nb_line_tLogRow_2++;
								// ////

								// ////

								// /////////////////////

								tos_count_tLogRow_2++;

								/**
								 * [tLogRow_2 main ] stop
								 */

							} // End of branch "row5"

							// Start of branch "row4"
							if (row4 != null) {

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								// row4
								// row4

								if (execStat) {
									runStat.updateStatOnConnection("row4"
											+ iterateId, 1, 1);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row2"
								// /////////////////////////////////////////////

								boolean forceLooprow2 = false;

								row2Struct row2ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_1 = false;

									row2HashKey.model_name = row4.RCV_MODEL_CODE;

									row2HashKey.hashCodeDirty = true;

									tHash_Lookup_row2.lookup(row2HashKey);

								} // G_TM_M_020

								if (tHash_Lookup_row2 != null
										&& tHash_Lookup_row2
												.getCount(row2HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.model_name = '"
									// + row2HashKey.model_name + "'");
								} // G 071

								row2Struct row2 = null;

								row2Struct fromLookup_row2 = null;
								row2 = row2Default;

								if (tHash_Lookup_row2 != null
										&& tHash_Lookup_row2.hasNext()) { // G
																			// 099

									fromLookup_row2 = tHash_Lookup_row2.next();

								} // G 099

								if (fromLookup_row2 != null) {
									row2 = fromLookup_row2;
								}

								// /////////////////////////////////////////////
								// Starting Lookup Table "row6"
								// /////////////////////////////////////////////

								boolean forceLooprow6 = false;

								row6Struct row6ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									tHash_Lookup_row6.lookup(row6HashKey);

									if (!tHash_Lookup_row6.hasNext()) { // G_TM_M_090

										forceLooprow6 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLooprow6 = true;
								} // G 21

								row6Struct row6 = null;

								while (tHash_Lookup_row6.hasNext()
										|| forceLooprow6) { // G_TM_M_043

									// CALL close loop of lookup 'row6'

									row6Struct fromLookup_row6 = null;
									row6 = row6Default;

									if (!forceLooprow6) { // G 46

										fromLookup_row6 = tHash_Lookup_row6
												.next();

										if (fromLookup_row6 != null) {
											row6 = fromLookup_row6;
										}

									} // G 46

									forceLooprow6 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
										// ###############################
										// # Output tables

										out1 = null;

										// # Output table : 'out1'
										out1_tmp.version = 0;
										out1_tmp.comment = row4.RCV_COMMENTS
												+ " CSIRO";
										out1_tmp.model_id = row2.id;
										out1_tmp.serial_number = String
												.valueOf(row4.RCV_SERIAL_NO);
										out1_tmp.status_id = null;
										out1_tmp._class = "au.org.emii.aatams.Receiver";
										out1_tmp.organisation_id = 629985l;
										out1_tmp.expected_life_time_days = null;
										out1_tmp.project_id = null;
										out1_tmp.code_map_id = null;
										out1_tmp.id = Numeric.sequence("s1",
												(int) row6.nextval, 1);
										out1 = out1_tmp;
										// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_1 = false;

									tos_count_tMap_1++;

									/**
									 * [tMap_1 main ] stop
									 */
									// Start of branch "out1"
									if (out1 != null) {

										/**
										 * [tPostgresqlOutput_2 main ] start
										 */

										currentComponent = "tPostgresqlOutput_2";

										// out1
										// out1

										if (execStat) {
											runStat.updateStatOnConnection(
													"out1" + iterateId, 1, 1);
										}

										whetherReject_tPostgresqlOutput_2 = false;
										pstmt_tPostgresqlOutput_2.setLong(1,
												out1.version);

										if (out1.comment == null) {
											pstmt_tPostgresqlOutput_2.setNull(
													2, java.sql.Types.VARCHAR);
										} else {
											pstmt_tPostgresqlOutput_2
													.setString(2, out1.comment);
										}

										pstmt_tPostgresqlOutput_2.setLong(3,
												out1.model_id);

										if (out1.serial_number == null) {
											pstmt_tPostgresqlOutput_2.setNull(
													4, java.sql.Types.VARCHAR);
										} else {
											pstmt_tPostgresqlOutput_2
													.setString(4,
															out1.serial_number);
										}

										if (out1.status_id == null) {
											pstmt_tPostgresqlOutput_2.setNull(
													5, java.sql.Types.INTEGER);
										} else {
											pstmt_tPostgresqlOutput_2.setLong(
													5, out1.status_id);
										}

										if (out1._class == null) {
											pstmt_tPostgresqlOutput_2.setNull(
													6, java.sql.Types.VARCHAR);
										} else {
											pstmt_tPostgresqlOutput_2
													.setString(6, out1._class);
										}

										if (out1.organisation_id == null) {
											pstmt_tPostgresqlOutput_2.setNull(
													7, java.sql.Types.INTEGER);
										} else {
											pstmt_tPostgresqlOutput_2.setLong(
													7, out1.organisation_id);
										}

										if (out1.expected_life_time_days == null) {
											pstmt_tPostgresqlOutput_2.setNull(
													8, java.sql.Types.INTEGER);
										} else {
											pstmt_tPostgresqlOutput_2
													.setInt(
															8,
															out1.expected_life_time_days);
										}

										if (out1.project_id == null) {
											pstmt_tPostgresqlOutput_2.setNull(
													9, java.sql.Types.INTEGER);
										} else {
											pstmt_tPostgresqlOutput_2.setLong(
													9, out1.project_id);
										}

										if (out1.code_map_id == null) {
											pstmt_tPostgresqlOutput_2.setNull(
													10, java.sql.Types.INTEGER);
										} else {
											pstmt_tPostgresqlOutput_2.setLong(
													10, out1.code_map_id);
										}

										pstmt_tPostgresqlOutput_2.setLong(11,
												out1.id);

										try {
											insertedCount_tPostgresqlOutput_2 = insertedCount_tPostgresqlOutput_2
													+ pstmt_tPostgresqlOutput_2
															.executeUpdate();
											nb_line_tPostgresqlOutput_2++;
										} catch (Exception e) {
											whetherReject_tPostgresqlOutput_2 = true;
											System.err.print(e.getMessage());
										}
										commitCounter_tPostgresqlOutput_2++;
										if (commitEvery_tPostgresqlOutput_2 <= commitCounter_tPostgresqlOutput_2) {

											conn_tPostgresqlOutput_2.commit();
											commitCounter_tPostgresqlOutput_2 = 0;
										}

										tos_count_tPostgresqlOutput_2++;

										/**
										 * [tPostgresqlOutput_2 main ] stop
										 */

									} // End of branch "out1"

								} // close loop of lookup 'row6' // G_TM_M_043

							} // End of branch "row4"

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						nb_line_tFileInputDelimited_2++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_2 != null) {
							csvReadertFileInputDelimited_2.close();
						}
					}
					if (csvReadertFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								nb_line_tFileInputDelimited_2);
					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System
						.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tJoin_1 end ] start
				 */

				currentComponent = "tJoin_1";

				if (execStat) {
					runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
				}

				ok_Hash.put("tJoin_1", true);
				end_Hash.put("tJoin_1", System.currentTimeMillis());

				/**
				 * [tJoin_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				if (tHash_Lookup_row6 != null) {
					tHash_Lookup_row6.endGet();
				}
				globalMap.remove("tHash_Lookup_row6");

				// ###############################

				if (execStat) {
					runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_2 end ] start
				 */

				currentComponent = "tPostgresqlOutput_2";

				if (pstmt_tPostgresqlOutput_2 != null) {

					pstmt_tPostgresqlOutput_2.close();

				}

				conn_tPostgresqlOutput_2.commit();
				conn_tPostgresqlOutput_2.close();

				nb_line_deleted_tPostgresqlOutput_2 = nb_line_deleted_tPostgresqlOutput_2
						+ deletedCount_tPostgresqlOutput_2;
				nb_line_update_tPostgresqlOutput_2 = nb_line_update_tPostgresqlOutput_2
						+ updatedCount_tPostgresqlOutput_2;
				nb_line_inserted_tPostgresqlOutput_2 = nb_line_inserted_tPostgresqlOutput_2
						+ insertedCount_tPostgresqlOutput_2;
				nb_line_rejected_tPostgresqlOutput_2 = nb_line_rejected_tPostgresqlOutput_2
						+ rejectedCount_tPostgresqlOutput_2;

				globalMap.put("tPostgresqlOutput_2_NB_LINE",
						nb_line_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_2);
				if (execStat) {
					runStat.updateStatOnConnection("out1" + iterateId, 2, 0);
				}

				ok_Hash.put("tPostgresqlOutput_2", true);
				end_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_2 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

				// ////

				java.io.PrintStream consoleOut_tLogRow_2 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_2 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
				}

				consoleOut_tLogRow_2
						.println(util_tLogRow_2.format().toString());
				consoleOut_tLogRow_2.flush();
				// ////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

				// /////////////////////
				if (execStat) {
					runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			runStat.stopThreadStat();
			throw new java.lang.Error(error);

		} finally {
			// free memory for "tMap_1"
			globalMap.put("tHash_Lookup_row2", null);

			// free memory for "tMap_1"
			globalMap.put("tHash_Lookup_row6", null);

			// free memory for "tJoin_1"
			globalMap.put("tHash_row3", null);

		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public long version;

		public long getVersion() {
			return this.version;
		}

		public long manufacturer_id;

		public long getManufacturer_id() {
			return this.manufacturer_id;
		}

		public String model_name;

		public String getModel_name() {
			return this.model_name;
		}

		public String _class;

		public String get_class() {
			return this._class;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.model_name == null) ? 0 : this.model_name
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.model_name == null) {
				if (other.model_name != null)
					return false;
			} else if (!this.model_name.equals(other.model_name))
				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.id = this.id;
			other.version = this.version;
			other.manufacturer_id = this.manufacturer_id;
			other.model_name = this.model_name;
			other._class = this._class;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.model_name = this.model_name;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.model_name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.model_name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = dis.readLong();

				this.version = dis.readLong();

				this.manufacturer_id = dis.readLong();

				this._class = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeLong(this.id);

				dos.writeLong(this.version);

				dos.writeLong(this.manufacturer_id);

				writeString(this._class, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",version=" + String.valueOf(version));
			sb.append(",manufacturer_id=" + String.valueOf(manufacturer_id));
			sb.append(",model_name=" + model_name);
			sb.append(",_class=" + _class);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.model_name,
					other.model_name);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tPostgresqlInput_1 -
				// inputs:(after_tFileInputDelimited_2) outputs:(row2,row2) |
				// target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row4,row2,row6) outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_1", false);
				start_Hash
						.put("tPostgresqlInput_1", System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_1";

				int tos_count_tPostgresqlInput_1 = 0;

				int nb_line_tPostgresqlInput_1 = 0;
				java.sql.Connection conn_tPostgresqlInput_1 = null;
				java.lang.Class.forName("org.postgresql.Driver");

				String url_tPostgresqlInput_1 = "jdbc:postgresql://"
						+ "localhost" + ":" + "5432" + "/" + "aatams";
				String dbUser_tPostgresqlInput_1 = "postgres";
				String dbPwd_tPostgresqlInput_1 = "postgres";
				conn_tPostgresqlInput_1 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_1, dbUser_tPostgresqlInput_1,
						dbPwd_tPostgresqlInput_1);
				conn_tPostgresqlInput_1.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1
						.createStatement();

				String dbquery_tPostgresqlInput_1 = "SELECT * FROM device_model;";

				globalMap.put("tPostgresqlInput_1_QUERY",
						dbquery_tPostgresqlInput_1);

				java.sql.ResultSet rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1
						.executeQuery(dbquery_tPostgresqlInput_1);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1
						.getColumnCount();

				String tmpContent_tPostgresqlInput_1 = null;
				while (rs_tPostgresqlInput_1.next()) {
					nb_line_tPostgresqlInput_1++;

					if (colQtyInRs_tPostgresqlInput_1 < 1) {
						row2.id = 0;
					} else {

						if (rs_tPostgresqlInput_1.getObject(1) != null) {
							row2.id = rs_tPostgresqlInput_1.getLong(1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tPostgresqlInput_1 < 2) {
						row2.version = 0;
					} else {

						if (rs_tPostgresqlInput_1.getObject(2) != null) {
							row2.version = rs_tPostgresqlInput_1.getLong(2);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tPostgresqlInput_1 < 3) {
						row2.manufacturer_id = 0;
					} else {

						if (rs_tPostgresqlInput_1.getObject(3) != null) {
							row2.manufacturer_id = rs_tPostgresqlInput_1
									.getLong(3);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tPostgresqlInput_1 < 4) {
						row2.model_name = null;
					} else {

						tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
								.getString(4);
						if (tmpContent_tPostgresqlInput_1 != null) {
							row2.model_name = tmpContent_tPostgresqlInput_1
									.trim();
						} else {
							row2.model_name = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_1 < 5) {
						row2._class = null;
					} else {

						tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
								.getString(5);
						if (tmpContent_tPostgresqlInput_1 != null) {
							row2._class = tmpContent_tPostgresqlInput_1.trim();
						} else {
							row2._class = null;
						}

					}

					/**
					 * [tPostgresqlInput_1 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_1 main ] start
					 */

					currentComponent = "tPostgresqlInput_1";

					tos_count_tPostgresqlInput_1++;

					/**
					 * [tPostgresqlInput_1 main ] stop
					 */

					/**
					 * [tAdvancedHash_row2 main ] start
					 */

					currentComponent = "tAdvancedHash_row2";

					// row2
					// row2

					if (execStat) {
						runStat.updateStatOnConnection("row2" + iterateId, 1, 1);
					}

					row2Struct row2_HashRow = new row2Struct();

					row2_HashRow.id = row2.id;

					row2_HashRow.version = row2.version;

					row2_HashRow.manufacturer_id = row2.manufacturer_id;

					row2_HashRow.model_name = row2.model_name;

					row2_HashRow._class = row2._class;

					tHash_Lookup_row2.put(row2_HashRow);

					tos_count_tAdvancedHash_row2++;

					/**
					 * [tAdvancedHash_row2 main ] stop
					 */

					/**
					 * [tPostgresqlInput_1 end ] start
					 */

					currentComponent = "tPostgresqlInput_1";

				}
				stmt_tPostgresqlInput_1.close();

				conn_tPostgresqlInput_1.commit();
				conn_tPostgresqlInput_1.close();

				globalMap.put("tPostgresqlInput_1_NB_LINE",
						nb_line_tPostgresqlInput_1);

				ok_Hash.put("tPostgresqlInput_1", true);
				end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();
				if (execStat) {
					runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			runStat.stopThreadStat();
			throw new java.lang.Error(error);

		}

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public long version;

		public long getVersion() {
			return this.version;
		}

		public String comment;

		public String getComment() {
			return this.comment;
		}

		public long model_id;

		public long getModel_id() {
			return this.model_id;
		}

		public String serial_number;

		public String getSerial_number() {
			return this.serial_number;
		}

		public Long status_id;

		public Long getStatus_id() {
			return this.status_id;
		}

		public String _class;

		public String get_class() {
			return this._class;
		}

		public Long organisation_id;

		public Long getOrganisation_id() {
			return this.organisation_id;
		}

		public Integer expected_life_time_days;

		public Integer getExpected_life_time_days() {
			return this.expected_life_time_days;
		}

		public Long project_id;

		public Long getProject_id() {
			return this.project_id;
		}

		public Long code_map_id;

		public Long getCode_map_id() {
			return this.code_map_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.serial_number == null) ? 0
								: this.serial_number.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.serial_number == null) {
				if (other.serial_number != null)
					return false;
			} else if (!this.serial_number.equals(other.serial_number))
				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.id = this.id;
			other.version = this.version;
			other.comment = this.comment;
			other.model_id = this.model_id;
			other.serial_number = this.serial_number;
			other.status_id = this.status_id;
			other._class = this._class;
			other.organisation_id = this.organisation_id;
			other.expected_life_time_days = this.expected_life_time_days;
			other.project_id = this.project_id;
			other.code_map_id = this.code_map_id;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.serial_number = this.serial_number;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.serial_number = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.serial_number, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = dis.readLong();

				this.version = dis.readLong();

				this.comment = readString(dis, ois);

				this.model_id = dis.readLong();

				length = dis.readByte();
				if (length == -1) {
					this.status_id = null;
				} else {
					this.status_id = dis.readLong();
				}

				this._class = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.organisation_id = null;
				} else {
					this.organisation_id = dis.readLong();
				}

				this.expected_life_time_days = readInteger(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.project_id = null;
				} else {
					this.project_id = dis.readLong();
				}

				length = dis.readByte();
				if (length == -1) {
					this.code_map_id = null;
				} else {
					this.code_map_id = dis.readLong();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeLong(this.id);

				dos.writeLong(this.version);

				writeString(this.comment, dos, oos);

				dos.writeLong(this.model_id);

				if (this.status_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.status_id);
				}

				writeString(this._class, dos, oos);

				if (this.organisation_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.organisation_id);
				}

				writeInteger(this.expected_life_time_days, dos, oos);

				if (this.project_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.project_id);
				}

				if (this.code_map_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.code_map_id);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",version=" + String.valueOf(version));
			sb.append(",comment=" + comment);
			sb.append(",model_id=" + String.valueOf(model_id));
			sb.append(",serial_number=" + serial_number);
			sb.append(",status_id=" + String.valueOf(status_id));
			sb.append(",_class=" + _class);
			sb.append(",organisation_id=" + String.valueOf(organisation_id));
			sb.append(",expected_life_time_days="
					+ String.valueOf(expected_life_time_days));
			sb.append(",project_id=" + String.valueOf(project_id));
			sb.append(",code_map_id=" + String.valueOf(code_map_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.serial_number,
					other.serial_number);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tHash_row3 begin ] start
				 */

				ok_Hash.put("tHash_row3", false);
				start_Hash.put("tHash_row3", System.currentTimeMillis());
				currentComponent = "tHash_row3";

				if (execStat) {
					runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
				}

				int tos_count_tHash_row3 = 0;

				java.util.Map<row3Struct, row3Struct> tHash_row3 = new java.util.LinkedHashMap<row3Struct, row3Struct>();
				globalMap.put("tHash_row3", tHash_row3);

				/**
				 * [tHash_row3 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_2", false);
				start_Hash
						.put("tPostgresqlInput_2", System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_2";

				int tos_count_tPostgresqlInput_2 = 0;

				int nb_line_tPostgresqlInput_2 = 0;
				java.sql.Connection conn_tPostgresqlInput_2 = null;
				java.lang.Class.forName("org.postgresql.Driver");

				String url_tPostgresqlInput_2 = "jdbc:postgresql://"
						+ "localhost" + ":" + "5432" + "/" + "aatams";
				String dbUser_tPostgresqlInput_2 = "postgres";
				String dbPwd_tPostgresqlInput_2 = "postgres";
				conn_tPostgresqlInput_2 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_2, dbUser_tPostgresqlInput_2,
						dbPwd_tPostgresqlInput_2);
				conn_tPostgresqlInput_2.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2
						.createStatement();

				String dbquery_tPostgresqlInput_2 = "SELECT    \"aatams\".\"public\".\"device\".\"id\",    \"aatams\".\"public\".\"device\".\"version\",    \"aatams\".\"public\".\"device\".\"comment\",    \"aatams\".\"public\".\"device\".\"model_id\",    \"aatams\".\"public\".\"device\".\"serial_number\",    \"aatams\".\"public\".\"device\".\"status_id\",    \"aatams\".\"public\".\"device\".\"class\",    \"aatams\".\"public\".\"device\".\"organisation_id\",    \"aatams\".\"public\".\"device\".\"expected_life_time_days\",    \"aatams\".\"public\".\"device\".\"project_id\",    \"aatams\".\"public\".\"device\".\"code_map_id\" FROM \"aatams\".\"public\".\"device\"";

				globalMap.put("tPostgresqlInput_2_QUERY",
						dbquery_tPostgresqlInput_2);

				java.sql.ResultSet rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2
						.executeQuery(dbquery_tPostgresqlInput_2);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2
						.getColumnCount();

				String tmpContent_tPostgresqlInput_2 = null;
				while (rs_tPostgresqlInput_2.next()) {
					nb_line_tPostgresqlInput_2++;

					if (colQtyInRs_tPostgresqlInput_2 < 1) {
						row3.id = 0;
					} else {

						if (rs_tPostgresqlInput_2.getObject(1) != null) {
							row3.id = rs_tPostgresqlInput_2.getLong(1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 2) {
						row3.version = 0;
					} else {

						if (rs_tPostgresqlInput_2.getObject(2) != null) {
							row3.version = rs_tPostgresqlInput_2.getLong(2);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 3) {
						row3.comment = null;
					} else {

						tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
								.getString(3);
						if (tmpContent_tPostgresqlInput_2 != null) {
							row3.comment = tmpContent_tPostgresqlInput_2.trim();
						} else {
							row3.comment = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 4) {
						row3.model_id = 0;
					} else {

						if (rs_tPostgresqlInput_2.getObject(4) != null) {
							row3.model_id = rs_tPostgresqlInput_2.getLong(4);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 5) {
						row3.serial_number = null;
					} else {

						tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
								.getString(5);
						if (tmpContent_tPostgresqlInput_2 != null) {
							row3.serial_number = tmpContent_tPostgresqlInput_2
									.trim();
						} else {
							row3.serial_number = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 6) {
						row3.status_id = null;
					} else {

						if (rs_tPostgresqlInput_2.getObject(6) != null) {
							row3.status_id = rs_tPostgresqlInput_2.getLong(6);
						} else {
							row3.status_id = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 7) {
						row3._class = null;
					} else {

						tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
								.getString(7);
						if (tmpContent_tPostgresqlInput_2 != null) {
							row3._class = tmpContent_tPostgresqlInput_2.trim();
						} else {
							row3._class = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 8) {
						row3.organisation_id = null;
					} else {

						if (rs_tPostgresqlInput_2.getObject(8) != null) {
							row3.organisation_id = rs_tPostgresqlInput_2
									.getLong(8);
						} else {
							row3.organisation_id = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 9) {
						row3.expected_life_time_days = null;
					} else {

						if (rs_tPostgresqlInput_2.getObject(9) != null) {
							row3.expected_life_time_days = rs_tPostgresqlInput_2
									.getInt(9);
						} else {
							row3.expected_life_time_days = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 10) {
						row3.project_id = null;
					} else {

						if (rs_tPostgresqlInput_2.getObject(10) != null) {
							row3.project_id = rs_tPostgresqlInput_2.getLong(10);
						} else {
							row3.project_id = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 11) {
						row3.code_map_id = null;
					} else {

						if (rs_tPostgresqlInput_2.getObject(11) != null) {
							row3.code_map_id = rs_tPostgresqlInput_2
									.getLong(11);
						} else {
							row3.code_map_id = null;
						}

					}

					/**
					 * [tPostgresqlInput_2 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_2 main ] start
					 */

					currentComponent = "tPostgresqlInput_2";

					tos_count_tPostgresqlInput_2++;

					/**
					 * [tPostgresqlInput_2 main ] stop
					 */

					/**
					 * [tHash_row3 main ] start
					 */

					currentComponent = "tHash_row3";

					// row3
					// row3

					if (execStat) {
						runStat.updateStatOnConnection("row3" + iterateId, 1, 1);
					}

					row3Struct row3_HashRow = new row3Struct();

					row3_HashRow.id = row3.id;
					row3_HashRow.version = row3.version;
					row3_HashRow.comment = row3.comment;
					row3_HashRow.model_id = row3.model_id;
					row3_HashRow.serial_number = row3.serial_number;
					row3_HashRow.status_id = row3.status_id;
					row3_HashRow._class = row3._class;
					row3_HashRow.organisation_id = row3.organisation_id;
					row3_HashRow.expected_life_time_days = row3.expected_life_time_days;
					row3_HashRow.project_id = row3.project_id;
					row3_HashRow.code_map_id = row3.code_map_id;
					tHash_row3.put(row3_HashRow, row3_HashRow);

					tos_count_tHash_row3++;

					/**
					 * [tHash_row3 main ] stop
					 */

					/**
					 * [tPostgresqlInput_2 end ] start
					 */

					currentComponent = "tPostgresqlInput_2";

				}
				stmt_tPostgresqlInput_2.close();

				conn_tPostgresqlInput_2.commit();
				conn_tPostgresqlInput_2.close();

				globalMap.put("tPostgresqlInput_2_NB_LINE",
						nb_line_tPostgresqlInput_2);

				ok_Hash.put("tPostgresqlInput_2", true);
				end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_2 end ] stop
				 */

				/**
				 * [tHash_row3 end ] start
				 */

				currentComponent = "tHash_row3";

				if (execStat) {
					runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
				}

				ok_Hash.put("tHash_row3", true);
				end_Hash.put("tHash_row3", System.currentTimeMillis());

				/**
				 * [tHash_row3 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			runStat.stopThreadStat();
			throw new java.lang.Error(error);

		}

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public long nextval;

		public long getNextval() {
			return this.nextval;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.nextval = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.nextval);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nextval=" + String.valueOf(nextval));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tAdvancedHash_row6 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row6", false);
				start_Hash
						.put("tAdvancedHash_row6", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row6";

				if (execStat) {
					runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
				}

				int tos_count_tAdvancedHash_row6 = 0;

				// connection name:row6
				// source node:tPostgresqlInput_3 -
				// inputs:(after_tFileInputDelimited_2) outputs:(row6,row6) |
				// target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
				// linked node: tMap_1 - inputs:(row4,row2,row6) outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row6Struct> getLookup(matchingModeEnum_row6);

				globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);

				/**
				 * [tAdvancedHash_row6 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_3 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_3", false);
				start_Hash
						.put("tPostgresqlInput_3", System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_3";

				int tos_count_tPostgresqlInput_3 = 0;

				int nb_line_tPostgresqlInput_3 = 0;
				java.sql.Connection conn_tPostgresqlInput_3 = null;
				java.lang.Class.forName("org.postgresql.Driver");

				String url_tPostgresqlInput_3 = "jdbc:postgresql://"
						+ "localhost" + ":" + "5432" + "/" + "aatams";
				String dbUser_tPostgresqlInput_3 = "postgres";
				String dbPwd_tPostgresqlInput_3 = "postgres";
				conn_tPostgresqlInput_3 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_3, dbUser_tPostgresqlInput_3,
						dbPwd_tPostgresqlInput_3);
				conn_tPostgresqlInput_3.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3
						.createStatement();

				String dbquery_tPostgresqlInput_3 = "select nextval('hibernate_sequence')";

				globalMap.put("tPostgresqlInput_3_QUERY",
						dbquery_tPostgresqlInput_3);

				java.sql.ResultSet rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3
						.executeQuery(dbquery_tPostgresqlInput_3);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3
						.getColumnCount();

				String tmpContent_tPostgresqlInput_3 = null;
				while (rs_tPostgresqlInput_3.next()) {
					nb_line_tPostgresqlInput_3++;

					if (colQtyInRs_tPostgresqlInput_3 < 1) {
						row6.nextval = 0;
					} else {

						if (rs_tPostgresqlInput_3.getObject(1) != null) {
							row6.nextval = rs_tPostgresqlInput_3.getLong(1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}

					/**
					 * [tPostgresqlInput_3 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_3 main ] start
					 */

					currentComponent = "tPostgresqlInput_3";

					tos_count_tPostgresqlInput_3++;

					/**
					 * [tPostgresqlInput_3 main ] stop
					 */

					/**
					 * [tAdvancedHash_row6 main ] start
					 */

					currentComponent = "tAdvancedHash_row6";

					// row6
					// row6

					if (execStat) {
						runStat.updateStatOnConnection("row6" + iterateId, 1, 1);
					}

					row6Struct row6_HashRow = new row6Struct();

					row6_HashRow.nextval = row6.nextval;

					tHash_Lookup_row6.put(row6_HashRow);

					tos_count_tAdvancedHash_row6++;

					/**
					 * [tAdvancedHash_row6 main ] stop
					 */

					/**
					 * [tPostgresqlInput_3 end ] start
					 */

					currentComponent = "tPostgresqlInput_3";

				}
				stmt_tPostgresqlInput_3.close();

				conn_tPostgresqlInput_3.commit();
				conn_tPostgresqlInput_3.close();

				globalMap.put("tPostgresqlInput_3_NB_LINE",
						nb_line_tPostgresqlInput_3);

				ok_Hash.put("tPostgresqlInput_3", true);
				end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row6 end ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				tHash_Lookup_row6.endPut();
				if (execStat) {
					runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
				}

				ok_Hash.put("tAdvancedHash_row6", true);
				end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row6 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			runStat.stopThreadStat();
			throw new java.lang.Error(error);

		}

		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal threadLocal = new ThreadLocal();
	{
		java.util.Map threadRunResultMap = new java.util.HashMap();
		threadRunResultMap.put("errorCode", null);
		threadRunResultMap.put("status", "");
		threadLocal.set(threadRunResultMap);
	}

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final LoadReceivers LoadReceiversClass = new LoadReceivers();

		int exitCode = LoadReceiversClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = LoadReceivers.class
					.getClassLoader().getResourceAsStream(
							"csiro_to_aatams/loadreceivers_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}

				if (!context_param.isEmpty()) {
					context.putAll(context_param);
				}

			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {

		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_2) {
			status = "failure";
			e_tFileInputDelimited_2.printStackTrace();
			globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

		} finally {
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : LoadReceivers");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue
							.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 131926 characters generated by Talend Open Studio for Data Integration on the
 * May 30, 2012 2:24:03 PM EST
 ************************************************************************************************/
