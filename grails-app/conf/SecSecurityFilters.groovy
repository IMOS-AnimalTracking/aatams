import au.org.emii.aatams.*

import org.apache.shiro.SecurityUtils

/**
 * Generated by the Shiro plugin. This filters class protects all URLs
 * via access control by convention.
 */
class SecSecurityFilters 
{
    def permissionUtilsService
    
    //
    // Any controllers not specified here are only accessible to 
    // sys admin.
    //
    // The value in each map entry is the parameter relating to project ID
    // (for those entities controller by project membership/access).
    //
    //
    def accessibleControllers = 
        ["organisation":"",
         "organisationProject":"project.id",
         "project":"id",
         "projectRole":"project.id",
         "person":"",
         "installation":"project.id",
         "installationStation":"project.id",
         "receiver":"project.id",
         "species":"",
         "tag":"project.id",
         "sensor":"project.id",
         "animalRelease":"project.id",
         "detection":"project.id",
         "receiverDeployment":"project.id",
         "receiverRecovery":"project.id"]
    
    //
    // Anyone can execute the following actions (even if not
    // authenticated).
    //
    // Note that some entities may be filtered after action executes if not 
    // authenticated, e.g. embargoed data, scrambled station locations.
    //
    def publicActions =
        ["index",
         "list",
         "show",
         "lookupByName"]
    
    //
    // Only users with write permission on a specific project can perform these actions.
    //
    def projectWriteActions =
//        ["create",
//         "save",
//         "edit",
//         "update"]
        ["save",
         "edit",
         "update"]
    
    def projectWriteAnyActions =
        ["create"]
        
    
    def personWriteActions =
        ["create",
         "save",
         "edit",
         "update"]
        
    
    //
    // Only sys admin role can perform these actions.
    //
    def deleteActions = 
        ["delete"]
                        
    def filters = 
    {
        all(uri: "/**") 
        {
            before = 
            {
                // Ignore direct views (e.g. the default main index page).
                if (!controllerName) return true

                // Anyone should be able to see the navigation menu.
                if (controllerName == "navigationMenu")
                {
                    return true
                }
                
                if (   !accessibleControllers.containsKey(controllerName)
                    || deleteActions.contains(actionName))
                {
                    accessControl
                    {
                        role("SysAdmin")
                    }
                }
                else
                {
                    // null action is equivalent to action of "index"/"list"
                    if (publicActions.contains(actionName) || (actionName == null))
                    {
                        return true
                    }
                    
                    // Special handling for Person controller.
                    if (controllerName == "person")
                    {
                        return handlePerson(actionName, params)
                    }
                    
                    // Authenticated users can create Organisations (although
                    // they will have status of PENDING and not useable).
                    if (   controllerName == "organisation" 
                        && actionName == "save"
                        && SecurityUtils.subject.isAuthenticated())
                    {
                        return true
                    }
                    
                    if (   controllerName == "project" 
                        && actionName == "save"
                        && SecurityUtils.subject.isAuthenticated())
                    {
                        return true
                    }
                    
                    if (controllerName == "receiver")
                    {
                        if ((actionName == "update") || (actionName == "edit"))
                        {
                            String perm = permissionUtilsService.buildReceiverUpdatePermission(params.id)
                            if (SecurityUtils.subject.isPermitted(perm))
                            {
                                return true
                            }
                        }
                        
                        if ((actionName == "save") || (actionName == "create"))
                        {
                            if (SecurityUtils.subject.isPermitted(permissionUtilsService.buildReceiverCreatePermission()))
                            {
                                return true
                            }
                        }
                    }
                    
                    if (controllerName == "receiverDeployment")
                    {
                        def projectId
                        if ((actionName == "update") || (actionName == "edit"))
                        {
                            projectId = params.project.id
                        }
                        else if (actionName == "save")
                        {
                            projectId = InstallationStation.get(params?.station?.id)?.installation?.project?.id
                        }
                            
                        String perm = permissionUtilsService.buildProjectWritePermission(projectId)
                        if (SecurityUtils.subject.isPermitted(perm))
                        {
                            return true
                        }
                    }
                    
                    if (controllerName == "receiverRecovery")
                    {
                        def projectId
                        if (actionName == "update")
                        {
                            projectId = params.project.id
                        }
//                        else if (actionName == "edit")
//                        {
//                            
//                        }
                        else if (actionName == "save")
                        {
                            projectId = ReceiverDeployment.get(params.deploymentId)?.station?.installation?.project?.id
                        }
                            
                        String perm = permissionUtilsService.buildProjectWritePermission(projectId)
                        if (SecurityUtils.subject.isPermitted(perm))
                        {
                            return true
                        }
                        else
                        {
                            println("Not permitted, action: " + actionName)
                        }
                    }
                    
                    //
                    //  Only some users have "WRITE" access to a project (and
                    //  all its associated data).
                    //
                    if (projectWriteActions.contains(actionName))
                    {
                        def projectId = getProjectId(params, controllerName)
                        
                        if (SecurityUtils.subject.isPermitted(permissionUtilsService.buildProjectWritePermission(projectId)))
                        {
                            return true
                        }
                        else
                        {
                            log.warn("Not permitted, user: " + SecurityUtils.subject
                                     + ", controller: " + controllerName
                                     + ", action: " + actionName
                                     + ", project ID: " + String.valueOf(projectId))
                            System.out.println("Not permitted, user: " + SecurityUtils.subject
                                     + ", controller: " + controllerName
                                     + ", action: " + actionName
                                     + ", project ID: " + String.valueOf(projectId))
                        }
                    }

                    if (projectWriteAnyActions.contains(actionName))
                    {
                        if (SecurityUtils.subject.isPermitted(permissionUtilsService.buildProjectWriteAnyPermission()))
                        {
                            return true
                        }
                        else
                        {
                            log.warn("Not permitted, user: " + SecurityUtils.subject
                                     + ", controller: " + controllerName
                                     + ", action: " + actionName)
                            System.out.println("Not permitted, user: " + SecurityUtils.subject
                                     + ", controller: " + controllerName
                                     + ", action: " + actionName)
                        }
                    }
                    
                    // Access control by convention.
                    accessControl()
                }
            }
        }
    }
    
    /**
     * A person can do anything to their own record, except delete.
     * 
     * Prinicipal Investigators have special permissions regarding people, 
     * namely the ability to create people.
     * 
     * PIs can also edit people who have a role on the PIs project.
     */
    def handlePerson(actionName, params)
    {
        // Anyone (even unauthenticated users) can create and save people now.
        if (   !SecurityUtils.subject.isAuthenticated()
            && ((actionName == "create") || (actionName == "save")))
        {
            return true
        }
        
        SecUser paramUser = SecUser.get(params?.id)
        SecUser principal = SecUser.findByUsername(SecurityUtils?.subject?.principal)
        
        // User can do anything but delete to their own record.
        if (   (paramUser == principal)
            && !deleteActions.contains(actionName))
        {
            return true
        }
        
        // Sys admin can do anything.
        if (SecurityUtils.subject.hasRole("SysAdmin"))
        {
            return true
        }
        
        // Principal is a PI
        if (SecurityUtils.subject.isPermitted(permissionUtilsService.buildPrincipalInvestigatorPermission('*')))
        {
            if ((actionName == "create") || (actionName == "save"))
            {
                return true
            }
            else if ((actionName == "edit") || (actionName == "update"))
            {
                for (ProjectRole paramUserRole : paramUser.projectRoles)
                {
                    Project project = paramUserRole?.project
                    
                    // If the principal is a PI on this project, then they can edit.
                    if (SecurityUtils.subject.isPermitted(permissionUtilsService.buildPrincipalInvestigatorPermission(project?.id)))
                    {
                        return true
                    }
                }
            }
        }
        
        return false
        //accessControl()
    }
    
    /**
     * Returns the project ID (which can be stored in different parameters,
     * depending on the controller).
     */
    def getProjectId(params, controllerName)
    {
        // Special case for detection.
        if (controllerName == "detection")
        {
            def projectId = params[accessibleControllers[controllerName]]
            if (projectId != null)
            {
                return projectId
            }
            else
            {
                return ReceiverDeployment.get(params?.receiverDeployment?.id)?.station?.installation?.project?.id
            }
        }
        
        return params[accessibleControllers[controllerName]]
    }
}
